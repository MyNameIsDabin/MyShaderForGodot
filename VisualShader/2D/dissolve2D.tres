[gd_resource type="VisualShader" load_steps=12 format=2]

[sub_resource type="VisualShaderNodeColorUniform" id=1]
uniform_name = "outlineColor"

[sub_resource type="VisualShaderNodeVectorOp" id=2]

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 0.7 ]
operator = 2

[sub_resource type="VisualShaderNodeCompare" id=4]
function = 2

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "outlinePercent"

[sub_resource type="VisualShaderNodeScalarUniform" id=7]
uniform_name = "transparency"

[sub_resource type="VisualShaderNodeTextureUniform" id=8]
uniform_name = "noiseTexture"

[sub_resource type="VisualShaderNodeCompare" id=9]
function = 5

[sub_resource type="VisualShaderNodeTexture" id=10]
source = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=11]

[resource]
code = "shader_type canvas_item;
uniform float transparency;
uniform sampler2D noiseTexture;
uniform float outlinePercent;
uniform vec4 outlineColor : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:3
	float n_out3p0 = transparency;

// TextureUniform:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 n_tex_read = texture(noiseTexture, UV.xy);
		n_out6p0 = n_tex_read.rgb;
		n_out6p1 = n_tex_read.a;
	}

// VectorDecompose:9
	float n_out9p0 = n_out6p0.x;
	float n_out9p1 = n_out6p0.y;
	float n_out9p2 = n_out6p0.z;

// ScalarUniform:21
	float n_out21p0 = outlinePercent;

// ScalarOp:18
	float n_out18p0 = n_out9p0 * n_out21p0;

// Compare:19
	bool n_out19p0 = n_out3p0>n_out18p0;

// ColorUniform:13
	vec3 n_out13p0 = outlineColor.rgb;
	float n_out13p1 = outlineColor.a;

// VectorOp:20
	vec3 n_out20p0 = vec3(n_out19p0 ? 1.0 : 0.0) * n_out13p0;

// Texture:8
	vec3 n_out8p0;
	float n_out8p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out8p0 = _tex_read.rgb;
		n_out8p1 = _tex_read.a;
	}

// VectorOp:15
	vec3 n_out15p0 = n_out20p0 + n_out8p0;

// Compare:7
	bool n_out7p0 = n_out3p0<=n_out9p0;

// Output:0
	COLOR.rgb = n_out15p0;
	COLOR.a = n_out7p0 ? 1.0 : 0.0;

}

void light() {
// Output:0

}
"
custom_defines = ""
graph_offset = Vector2( -337.951, -271.434 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 620, -100 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( 40, -200 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( -200, -180 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( 420, -240 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( 380, 80 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( 20, -100 )
nodes/fragment/13/node = SubResource( 1 )
nodes/fragment/13/position = Vector2( 0, 100 )
nodes/fragment/15/node = SubResource( 2 )
nodes/fragment/15/position = Vector2( 620, 80 )
nodes/fragment/18/node = SubResource( 3 )
nodes/fragment/18/position = Vector2( 240, -60 )
nodes/fragment/19/node = SubResource( 4 )
nodes/fragment/19/position = Vector2( 420, -100 )
nodes/fragment/20/node = SubResource( 5 )
nodes/fragment/20/position = Vector2( 200, 100 )
nodes/fragment/21/node = SubResource( 6 )
nodes/fragment/21/position = Vector2( -180, 20 )
nodes/fragment/connections = PoolIntArray( 3, 0, 7, 0, 6, 0, 9, 0, 9, 0, 7, 1, 9, 0, 18, 0, 18, 0, 19, 1, 19, 0, 20, 0, 13, 0, 20, 1, 3, 0, 19, 0, 20, 0, 15, 0, 8, 0, 15, 1, 15, 0, 0, 0, 7, 0, 0, 1, 21, 0, 18, 1, 3, 0, 7, 0, 6, 0, 9, 0, 9, 0, 7, 1, 9, 0, 18, 0, 18, 0, 19, 1, 19, 0, 20, 0, 13, 0, 20, 1, 3, 0, 19, 0, 20, 0, 15, 0, 8, 0, 15, 1, 15, 0, 0, 0, 7, 0, 0, 1, 21, 0, 18, 1 )
